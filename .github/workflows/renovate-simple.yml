name: Renovate Setup

on:
  # Run every Sunday at 6am UTC
  schedule:
    - cron: "0 6 * * 0"

  # Allow manual trigger
  workflow_dispatch:

jobs:
  renovate:
    name: Run Renovate Bot
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      checks: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        id: audit
        run: |
          npm audit --audit-level=moderate --json > audit-results.json || true
          echo "audit-exit-code=$?" >> $GITHUB_OUTPUT
          if [ -f audit-results.json ]; then
            # Extract vulnerability count safely
            VULN_COUNT=$(node -e "try { const audit = require('./audit-results.json'); console.log(audit.metadata?.vulnerabilities?.total || 0); } catch(e) { console.log(0); }")
            echo "vulnerability-count=$VULN_COUNT" >> $GITHUB_OUTPUT
          else
            echo "vulnerability-count=0" >> $GITHUB_OUTPUT
          fi

      - name: Run Renovate
        uses: renovatebot/github-action@v43.0.18
        with:
          configurationFile: renovate.json
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          LOG_LEVEL: info
          RENOVATE_REPOSITORIES: ${{ github.repository }}
          RENOVATE_VULNERABILITY_ALERTS: true
          RENOVATE_OSV_VULNERABILITY_ALERTS: true
          RENOVATE_PR_CREATION: immediate
          RENOVATE_AUTOMERGE: true
          RENOVATE_AUTOMERGE_TYPE: pr

      - name: Build and Test (if Renovate created PRs)
        if: always()
        run: |
          echo "## 🔨 Build and Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if there are any open Renovate PRs
          PRS=$(gh pr list --label renovate --state open --json number --jq 'length')
          echo "Found $PRS open Renovate PRs" >> $GITHUB_STEP_SUMMARY

          if [ "$PRS" -gt 0 ]; then
            echo "✅ Renovate has created $PRS PR(s) for dependency updates" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next steps:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Review the PRs for any breaking changes" >> $GITHUB_STEP_SUMMARY
            echo "2. Run \`npm run build\` to test the build" >> $GITHUB_STEP_SUMMARY
            echo "3. Run \`npm run lint\` to check code quality" >> $GITHUB_STEP_SUMMARY
            echo "4. Merge PRs if tests pass" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No new dependency updates needed this week" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Summary
        if: always()
        run: |
          echo "Renovate has completed its run" >> $GITHUB_STEP_SUMMARY
          echo "Check [Pull Requests](https://github.com/${{ github.repository }}/pulls?q=is%3Apr+is%3Aopen+label%3Arenovate) for updates" >> $GITHUB_STEP_SUMMARY

  security-notification:
    name: Security Vulnerability Report
    needs: renovate
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        id: audit
        run: |
          npm audit --audit-level=moderate --json > audit-results.json || true
          echo "audit-exit-code=$?" >> $GITHUB_OUTPUT
          if [ -f audit-results.json ]; then
            # Extract vulnerability count safely
            VULN_COUNT=$(node -e "try { const audit = require('./audit-results.json'); console.log(audit.metadata?.vulnerabilities?.total || 0); } catch(e) { console.log(0); }")
            echo "vulnerability-count=$VULN_COUNT" >> $GITHUB_OUTPUT
          else
            echo "vulnerability-count=0" >> $GITHUB_OUTPUT
          fi

      - name: Check for security PRs and vulnerabilities
        id: security-check
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });

            const securityPRs = prs.filter(pr =>
              pr.labels.some(label => label.name === 'security') &&
              pr.labels.some(label => label.name === 'renovate')
            );

            const allRenovatePRs = prs.filter(pr =>
              pr.labels.some(label => label.name === 'renovate')
            );

            const majorUpdatePRs = prs.filter(pr =>
              pr.labels.some(label => label.name === 'major-update') &&
              pr.labels.some(label => label.name === 'renovate')
            );

            // Parse npm audit results
            let auditVulnerabilities = 0;
            try {
              const vulnCount = `${{ steps.audit.outputs.vulnerability-count }}`;
              auditVulnerabilities = parseInt(vulnCount) || 0;
            } catch (e) {
              console.log('Could not parse vulnerability count:', e.message);
            }

            core.setOutput('security_count', securityPRs.length);
            core.setOutput('total_count', allRenovatePRs.length);
            core.setOutput('major_count', majorUpdatePRs.length);
            core.setOutput('has_security', securityPRs.length > 0);
            core.setOutput('audit_vulnerabilities', auditVulnerabilities);

            // Create detailed report
            let report = `# 📊 Weekly Renovate Report\n\n`;
            report += `**Date:** ${new Date().toLocaleDateString()}\n`;
            report += `**Repository:** ${context.repo.owner}/${context.repo.repo}\n\n`;
            report += `## Summary\n\n`;
            report += `- 🔒 **Security Updates:** ${securityPRs.length}\n`;
            report += `- ⚠️  **Major Updates:** ${majorUpdatePRs.length}\n`;
            report += `- 📦 **Total Updates:** ${allRenovatePRs.length}\n`;
            report += `- 🚨 **NPM Audit Vulnerabilities:** ${auditVulnerabilities}\n\n`;

            if (securityPRs.length > 0) {
              report += `## 🚨 Security Vulnerabilities\n\n`;
              report += `The following PRs address security vulnerabilities:\n\n`;
              securityPRs.forEach(pr => {
                report += `### [${pr.title}](${pr.html_url})\n`;
                report += `- **Status:** ${pr.mergeable_state || 'unknown'}\n`;
                report += `- **Created:** ${new Date(pr.created_at).toLocaleDateString()}\n`;
                report += `- **Branch:** \`${pr.head.ref}\` → \`${pr.base.ref}\`\n\n`;
              });
            }

            if (majorUpdatePRs.length > 0) {
              report += `## ⚠️  Major Version Updates\n\n`;
              report += `These updates may contain breaking changes:\n\n`;
              majorUpdatePRs.forEach(pr => {
                report += `- [${pr.title}](${pr.html_url})\n`;
              });
              report += `\n`;
            }

            if (allRenovatePRs.length === 0) {
              report += `## ✅ All Up to Date\n\n`;
              report += `No dependency updates needed. All packages are up to date!\n\n`;
            }

            report += `## 📋 Actions Required\n\n`;
            if (securityPRs.length > 0) {
              report += `1. ⚠️  **URGENT:** Review and merge security updates as soon as possible\n`;
            }
            if (majorUpdatePRs.length > 0) {
              report += `2. Review major updates carefully for breaking changes\n`;
            }
            if (allRenovatePRs.length > 0) {
              report += `3. Check that all automated tests pass\n`;
              report += `4. Review [all Renovate PRs](https://github.com/${context.repo.owner}/${context.repo.repo}/pulls?q=is%3Apr+is%3Aopen+label%3Arenovate)\n`;
            }

            core.setOutput('report', report);
            return report;

      - name: Create or update security report issue
        if: steps.security-check.outputs.has_security == 'true' || steps.security-check.outputs.total_count > 0
        uses: actions/github-script@v7
        with:
          script: |
            const report = `${{ steps.security-check.outputs.report }}`;
            const title = `🔒 Weekly Security & Dependency Report - ${new Date().toLocaleDateString()}`;

            // Check if there's an open report issue from this week
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'renovate-report',
              state: 'open',
              per_page: 5
            });

            const weekAgo = new Date();
            weekAgo.setDate(weekAgo.getDate() - 7);

            const recentIssue = issues.find(issue =>
              new Date(issue.created_at) > weekAgo
            );

            if (recentIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: recentIssue.number,
                body: report
              });

              // Add comment about update
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: recentIssue.number,
                body: `🔄 Report updated at ${new Date().toLocaleString()}`
              });

              console.log(`Updated issue #${recentIssue.number}`);
            } else {
              // Create new issue
              const { data: issue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: report,
                labels: ['renovate-report', 'dependencies']
              });

              console.log(`Created issue #${issue.number}`);
            }

      - name: Post summary
        if: always()
        run: |
          echo "## 📧 Security Report Generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Security Updates: ${{ steps.security-check.outputs.security_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️  Major Updates: ${{ steps.security-check.outputs.major_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Total Updates: ${{ steps.security-check.outputs.total_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🚨 NPM Audit Vulnerabilities: ${{ steps.security-check.outputs.audit_vulnerabilities }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.security-check.outputs.has_security }}" = "true" ] || [ "${{ steps.security-check.outputs.audit_vulnerabilities }}" -gt 0 ]; then
            echo "⚠️  **VULNERABILITIES FOUND!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "A detailed report has been created as an issue." >> $GITHUB_STEP_SUMMARY
            echo "Team members watching this repository will receive email notifications." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**To fix vulnerabilities:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Run \`npm audit fix\` locally" >> $GITHUB_STEP_SUMMARY
            echo "2. Review and merge any security PRs created by Renovate" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**How to get notifications:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Watch this repository (Watch → Custom → Issues)" >> $GITHUB_STEP_SUMMARY
          echo "2. Subscribe to issues with 'renovate-report' label" >> $GITHUB_STEP_SUMMARY
