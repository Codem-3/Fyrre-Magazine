name: Renovate Bot

on:
  # Run every Sunday at 6am UTC
  schedule:
    - cron: "0 6 * * 0"

  # Allow manual trigger with branch selection
  workflow_dispatch:
    inputs:
      target_branch:
        description: "Target branch to scan"
        required: false
        default: "master"
        type: choice
        options:
          - master

jobs:
  renovate:
    name: Run Renovate Bot
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      checks: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Run npm audit
        id: audit
        run: |
          # Use npm audit without requiring npm ci - audit package-lock.json directly
          npm audit --audit-level=moderate --json > audit-results.json || true
          if [ -f audit-results.json ]; then
            VULN_COUNT=$(jq -r '.metadata.vulnerabilities.total // 0' audit-results.json 2>/dev/null || echo "0")
            echo "vulnerability-count=$VULN_COUNT" >> $GITHUB_OUTPUT

            # Extract vulnerability details
            CRITICAL=$(jq -r '.metadata.vulnerabilities.critical // 0' audit-results.json 2>/dev/null || echo "0")
            HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' audit-results.json 2>/dev/null || echo "0")
            MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' audit-results.json 2>/dev/null || echo "0")

            echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
            echo "high=$HIGH" >> $GITHUB_OUTPUT
            echo "moderate=$MODERATE" >> $GITHUB_OUTPUT
          else
            echo "vulnerability-count=0" >> $GITHUB_OUTPUT
            echo "critical=0" >> $GITHUB_OUTPUT
            echo "high=0" >> $GITHUB_OUTPUT
            echo "moderate=0" >> $GITHUB_OUTPUT
          fi

      - name: Run Renovate
        uses: renovatebot/github-action@v43.0.18
        with:
          configurationFile: renovate.json
          token: ${{ secrets.RENOVATE_TOKEN || secrets.GITHUB_TOKEN }}
        env:
          LOG_LEVEL: info
          RENOVATE_REPOSITORIES: ${{ github.repository }}
          RENOVATE_VULNERABILITY_ALERTS: true
          RENOVATE_OSV_VULNERABILITY_ALERTS: true
          RENOVATE_PR_CREATION: immediate
          # Override baseBranches when manually triggered with custom branch selection
          RENOVATE_BASE_BRANCHES: ${{ github.event.inputs.target_branch || 'develop/2.3' }}

      - name: Summary
        if: always()
        run: |
          echo "## 🤖 Renovate Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Branch:** \`${{ github.event.inputs.target_branch || 'develop/2.3' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check [Pull Requests](https://github.com/${{ github.repository }}/pulls?q=is%3Apr+is%3Aopen+label%3Arenovate) for updates" >> $GITHUB_STEP_SUMMARY

  security-notification:
    name: Security Vulnerability Report
    needs: renovate
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Run npm audit
        id: audit
        run: |
          # Use npm audit without requiring npm ci - audit package-lock.json directly
          npm audit --audit-level=moderate --json > audit-results.json || true
          if [ -f audit-results.json ]; then
            VULN_COUNT=$(jq -r '.metadata.vulnerabilities.total // 0' audit-results.json 2>/dev/null || echo "0")
            echo "vulnerability-count=$VULN_COUNT" >> $GITHUB_OUTPUT

            # Extract vulnerability details
            CRITICAL=$(jq -r '.metadata.vulnerabilities.critical // 0' audit-results.json 2>/dev/null || echo "0")
            HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' audit-results.json 2>/dev/null || echo "0")
            MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' audit-results.json 2>/dev/null || echo "0")

            echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
            echo "high=$HIGH" >> $GITHUB_OUTPUT
            echo "moderate=$MODERATE" >> $GITHUB_OUTPUT
          else
            echo "vulnerability-count=0" >> $GITHUB_OUTPUT
            echo "critical=0" >> $GITHUB_OUTPUT
            echo "high=0" >> $GITHUB_OUTPUT
            echo "moderate=0" >> $GITHUB_OUTPUT
          fi

      - name: Check for security PRs and vulnerabilities
        id: security-check
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });

            const securityPRs = prs.filter(pr =>
              pr.labels.some(label => label.name === 'security') &&
              pr.labels.some(label => label.name === 'renovate')
            );

            const allRenovatePRs = prs.filter(pr =>
              pr.labels.some(label => label.name === 'renovate')
            );

            const majorUpdatePRs = prs.filter(pr =>
              pr.labels.some(label => label.name === 'major-update') &&
              pr.labels.some(label => label.name === 'renovate')
            );

            // Get npm audit results
            let auditVulnerabilities = 0;
            let criticalCount = 0;
            let highCount = 0;
            let moderateCount = 0;
            try {
              const vulnCount = `${{ steps.audit.outputs.vulnerability-count }}`;
              auditVulnerabilities = parseInt(vulnCount) || 0;
              criticalCount = parseInt(`${{ steps.audit.outputs.critical }}`) || 0;
              highCount = parseInt(`${{ steps.audit.outputs.high }}`) || 0;
              moderateCount = parseInt(`${{ steps.audit.outputs.moderate }}`) || 0;
            } catch (e) {
              console.log('Could not parse vulnerability count:', e.message);
            }

            core.setOutput('security_count', securityPRs.length);
            core.setOutput('total_count', allRenovatePRs.length);
            core.setOutput('major_count', majorUpdatePRs.length);
            core.setOutput('audit_vulnerabilities', auditVulnerabilities);
            core.setOutput('critical_count', criticalCount);
            core.setOutput('high_count', highCount);
            core.setOutput('moderate_count', moderateCount);
            core.setOutput('has_security', securityPRs.length > 0 || auditVulnerabilities > 0);

            // Get target branch
            const targetBranch = '${{ github.event.inputs.target_branch }}' || 'develop/2.3';

            // Create detailed report
            let report = `# 📊 Weekly Security & Dependency Report\n\n`;
            report += `**📅 Date:** ${new Date().toLocaleDateString()}\n`;
            report += `**🏢 Repository:** ${context.repo.owner}/${context.repo.repo}\n`;
            report += `**⏰ Generated:** ${new Date().toLocaleString()}\n`;
            report += `**🎯 Target Branch:** \`${targetBranch}\`\n\n`;

            // Add vulnerability breakdown
            if (auditVulnerabilities > 0) {
              report += `## 🚨 Security Vulnerabilities Detected\n\n`;
              report += `**Total Vulnerabilities:** ${auditVulnerabilities}\n\n`;
              report += `### Vulnerability Breakdown\n\n`;
              report += `| Severity | Count |\n`;
              report += `|----------|-------|\n`;
              if (criticalCount > 0) report += `| 🔴 Critical | ${criticalCount} |\n`;
              if (highCount > 0) report += `| 🟠 High | ${highCount} |\n`;
              if (moderateCount > 0) report += `| 🟡 Moderate | ${moderateCount} |\n`;
              report += `\n`;
            }

            report += `## 🔔 Notification Settings\n\n`;
            report += `To receive notifications for future reports:\n`;
            report += `- **Watch this repository** (Settings → Notifications → Custom → Issues)\n`;
            report += `- **Subscribe to \`renovate-report\` label** for automated reports\n`;
            report += `- **Enable email notifications** for security alerts\n\n`;
            report += `---\n`;
            report += `*This report was automatically generated by the Renovate Security Workflow*\n`;
            report += `*Next scheduled run: Every Sunday at 6:00 AM UTC*`;

            // Write report to file for next step
            const fs = require('fs');
            fs.writeFileSync('/tmp/renovate-report.md', report);

            core.setOutput('report', report);
            return report;

      - name: Create or update security report issue
        if: steps.security-check.outputs.audit_vulnerabilities > 0 || steps.security-check.outputs.total_count > 0
        uses: actions/github-script@v7
        with:
          script: |
            // Get the report from the previous step output
            const fs = require('fs');
            const report = fs.readFileSync('/tmp/renovate-report.md', 'utf8');
            const title = `🔒 Weekly Security & Dependency Report - ${new Date().toLocaleDateString()}`;

            // Check if there's an open report issue from this week
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'renovate-report',
              state: 'open',
              per_page: 5
            });

            const weekAgo = new Date();
            weekAgo.setDate(weekAgo.getDate() - 7);

            const recentIssue = issues.find(issue =>
              new Date(issue.created_at) > weekAgo
            );

            if (recentIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: recentIssue.number,
                body: report
              });

              // Add comment about update
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: recentIssue.number,
                body: `🔄 Report updated at ${new Date().toLocaleString()}`
              });

              console.log(`Updated issue #${recentIssue.number}`);
            } else {
              // Create new issue
              const { data: issue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: report,
                labels: ['renovate-report', 'dependencies']
              });

              console.log(`Created issue #${issue.number}`);
            }

      - name: Post summary
        if: always()
        run: |
          if [ "${{ steps.security-check.outputs.audit_vulnerabilities }}" -gt 0 ] || [ "${{ steps.security-check.outputs.has_security }}" = "true" ]; then
            echo "⚠️  **VULNERABILITIES FOUND!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Target Branch:** \`${{ github.event.inputs.target_branch || 'develop/2.3' }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Number of vulnerabilities:** ${{ steps.security-check.outputs.audit_vulnerabilities }}" >> $GITHUB_STEP_SUMMARY
            if [ "${{ steps.security-check.outputs.critical_count }}" -gt 0 ]; then
              echo "  - 🔴 Critical: ${{ steps.security-check.outputs.critical_count }}" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ steps.security-check.outputs.high_count }}" -gt 0 ]; then
              echo "  - 🟠 High: ${{ steps.security-check.outputs.high_count }}" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ steps.security-check.outputs.moderate_count }}" -gt 0 ]; then
              echo "  - 🟡 Moderate: ${{ steps.security-check.outputs.moderate_count }}" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "A detailed report has been created as an issue." >> $GITHUB_STEP_SUMMARY
            echo "Team members watching this repository will receive email notifications." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**To fix vulnerabilities:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Run \`npm audit fix\` locally" >> $GITHUB_STEP_SUMMARY
            echo "2. Review and merge the Renovate PR with all dependency updates" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Target Branch:** \`${{ github.event.inputs.target_branch || 'develop/2.3' }}\`" >> $GITHUB_STEP_SUMMARY
          fi
